local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
-- Добавьте этот код сразу после загрузки Rayfield:
local function SafeThirdPartyService()
    local success, service = pcall(function()
        return game:GetService("ThirdPartyUserService")
    end)
    if not success then
        warn("ThirdPartyUserService не доступен")
        return nil
    end
    return {
        GetUserInfo = function(userId)
            local ok, result = pcall(service.GetUserInfo, service, userId)
            return ok and result or nil
        end
        -- Добавьте другие методы, если нужны
    }
end

local ThirdPartyService = SafeThirdPartyService()  -- Используйте это вместо прямых вызовов

local Window = Rayfield:CreateWindow({

	
   Name = "Levas Hub",
   LoadingTitle = "Levas Hub",
   LoadingSubtitle = "by mini.lèvas :3",
   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil,
      FileName = "LevasHub"
   },
   KeySystem = true,
   KeySettings = {
      Title = "Key",
      Subtitle = "Key System",
      Note = "Мое любимое слово",
      FileName = "My love word",
      SaveKey = true,
      GrabKeyFromSite = false,
      Key = {"GOIDA"}
   }
})

-- Функции файловой системы для совместимости
if not isfile then
    getgenv().isfile = function() return false end
    getgenv().writefile = function() end
    getgenv().readfile = function() return "[]" end
end

local FlyTab = Window:CreateTab("Main", 4483362458)

local MovementSection = FlyTab:CreateSection("Movement")

local walkSpeed = 16
local jumpPower = 50
local movementIgnoreCallbacks = false
local lastWalkSpeed = 16
local lastJumpPower = 50
local movementToggleKeybind = Enum.KeyCode.N
local movementKeybindDebounce = false

local function SafeSetMovement(element, value)
    if element and element.Set then
        movementIgnoreCallbacks = true
        element:Set(value)
        movementIgnoreCallbacks = false
        return true
    end
    return false
end

local walkSpeedSlider = FlyTab:CreateSlider({
    Name = "Скорость ходьбы",
    Range = {16, 2000},
    Increment = 1,
    CurrentValue = walkSpeed,
    Suffix = "ед/с",
    Flag = "WalkSpeedSlider",
    Callback = function(value)
        if movementIgnoreCallbacks then return end
        walkSpeed = value
        lastWalkSpeed = value
        SafeSetMovement(walkSpeedInput, tostring(value))
        pcall(function()
            game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = value
        end)
    end
})

local walkSpeedInput = FlyTab:CreateInput({
    Name = "Ручной ввод скорости ходьбы",
    PlaceholderText = "Введите скорость (16-2000)",
    RemoveTextAfterFocusLost = false,
    NumbersOnly = true,
    CharacterLimit = 3,
    CurrentValue = tostring(walkSpeed),
    Flag = "WalkSpeedInput",
    Callback = function(value)
        if movementIgnoreCallbacks then return end
        local num = tonumber(value)
        if num then
            num = math.clamp(num, 16, 2000)
            walkSpeed = num
            lastWalkSpeed = num
            SafeSetMovement(walkSpeedSlider, num)
            pcall(function()
                game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = num
            end)
        else
            SafeSetMovement(walkSpeedInput, tostring(walkSpeed))
        end
    end
})

local jumpPowerSlider = FlyTab:CreateSlider({
    Name = "Сила прыжка",
    Range = {50, 2000},
    Increment = 1,
    CurrentValue = jumpPower,
    Suffix = "ед",
    Flag = "JumpPowerSlider",
    Callback = function(value)
        if movementIgnoreCallbacks then return end
        jumpPower = value
        lastJumpPower = value
        SafeSetMovement(jumpPowerInput, tostring(value))
        pcall(function()
            game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower = value
        end)
    end
})

local jumpPowerInput = FlyTab:CreateInput({
    Name = "Ручной ввод силы прыжка",
    PlaceholderText = "Введите силу (50-2000)",
    RemoveTextAfterFocusLost = false,
    NumbersOnly = true,
    CharacterLimit = 3,
    CurrentValue = tostring(jumpPower),
    Flag = "JumpPowerInput",
    Callback = function(value)
        if movementIgnoreCallbacks then return end
        local num = tonumber(value)
        if num then
            num = math.clamp(num, 50, 2000)
            jumpPower = num
            lastJumpPower = num
            SafeSetMovement(jumpPowerSlider, num)
            pcall(function()
                game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower = num
            end)
        else
            SafeSetMovement(jumpPowerInput, tostring(jumpPower))
        end
    end
})

local movementMasterToggle = FlyTab:CreateToggle({
    Name = "Включить все параметры Movement",
    CurrentValue = true,
    Flag = "MovementMasterToggle",
    Callback = function(state)
        movementIgnoreCallbacks = true
        
        if state then
            walkSpeed = lastWalkSpeed
            jumpPower = lastJumpPower
            Rayfield:Notify({
                Title = "Movement",
                Content = "Все параметры Movement включены",
                Duration = 2,
                Image = nil
            })
        else
            lastWalkSpeed = walkSpeed
            lastJumpPower = jumpPower
            walkSpeed = 16
            jumpPower = 50
            Rayfield:Notify({
                Title = "Movement",
                Content = "Все параметры Movement выключены",
                Duration = 2,
                Image = nil
            })
        end
        
        walkSpeedSlider:Set(walkSpeed)
        walkSpeedInput:Set(tostring(walkSpeed))
        jumpPowerSlider:Set(jumpPower)
        jumpPowerInput:Set(tostring(jumpPower))
        
        movementIgnoreCallbacks = false
        
        local player = game:GetService("Players").LocalPlayer
        if player and player.Character then
            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = walkSpeed
                humanoid.JumpPower = jumpPower
            end
        end
    end
})

local movementKeybind = FlyTab:CreateKeybind({
    Name = "Бинд для Movement (по умолчанию N)",
    CurrentKeybind = "N",
    HoldToInteract = false,
    Flag = "MovementKeybind",
    Callback = function(key)
        if movementKeybindDebounce then return end
        movementKeybindDebounce = true
        
        if key ~= movementToggleKeybind then
            if key then
                movementToggleKeybind = key
                Rayfield:Notify({
                    Title = "Movement",
                    Content = "Клавиша для Movement изменена на: "..tostring(key),
                    Duration = 2,
                    Image = nil
                })
            end
        else
            local newState = not movementMasterToggle.CurrentValue
            movementMasterToggle:Set(newState)
        end
        
        task.wait(0.2)
        movementKeybindDebounce = false
    end
})

game:GetService("UserInputService").InputBegan:Connect(function(input, processed)
    if processed then return end
    if input.KeyCode == movementToggleKeybind then
        if movementKeybindDebounce then return end
        movementKeybindDebounce = true
        
        local newState = not movementMasterToggle.CurrentValue
        movementMasterToggle:Set(newState)
        
        task.wait(0.2)
        movementKeybindDebounce = false
    end
end)

game:GetService("Players").LocalPlayer.CharacterAdded:Connect(function(character)
    character:WaitForChild("Humanoid")
    task.wait(0.5)
    pcall(function()
        character.Humanoid.WalkSpeed = walkSpeed
        character.Humanoid.JumpPower = jumpPower
    end)
end)

local FlySection = FlyTab:CreateSection("Fly")

local flyEnabled = false
local flySpeed = 400
local flyConnections = {}
local flyObjects = {}
local flyKeybind = Enum.KeyCode.V
local noClipKeybind = Enum.KeyCode.B
local ignoreCallbacks = true
local showNotifications = true
local keybindDebounce = false
local noClipKeybindDebounce = false
local noClipEnabled = false
local smoothFlight = true

local speedSlider, speedInput, keybindInput, flightToggle, noClipToggle, smoothToggle, noClipKeybindInput

local function SafeSet(element, value)
    if element and element.Set then
        ignoreCallbacks = true
        element:Set(value)
        ignoreCallbacks = false
        return true
    end
    return false
end

local function Notify(title, content, duration)
    if showNotifications and Rayfield and Rayfield.Notify then
        Rayfield:Notify({
            Title = title,
            Content = content,
            Duration = duration or 3,
            Image = nil
        })
    end
end

local function IsValidKey(key)
    if not key then return false end
    local invalidKeys = {
        Enum.KeyCode.Unknown, Enum.KeyCode.ButtonR3, Enum.KeyCode.ButtonL3,
        Enum.KeyCode.ButtonStart, Enum.KeyCode.ButtonSelect
    }
    
    for _, invalidKey in pairs(invalidKeys) do
        if key == invalidKey then return false end
    end
    return true
end

local function UpdateNoClip()
    local player = game:GetService("Players").LocalPlayer
    if not player or not player.Character then return end
    
    for _, part in ipairs(player.Character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = not noClipEnabled
        end
    end
end

speedSlider = FlyTab:CreateSlider({
    Name = "Скорость полёта",
    Range = {1, 100000},
    Increment = 1,
    CurrentValue = flySpeed,
    Suffix = "ед/с",
    Flag = "FlightSpeedSlider",
    Callback = function(value)
        if ignoreCallbacks then return end
        flySpeed = value
        SafeSet(speedInput, value)
    end
})

speedInput = FlyTab:CreateInput({
    Name = "Ручной ввод скорости",
    PlaceholderText = "Введите скорость (1-100000)",
    RemoveTextAfterFocusLost = false,
    NumbersOnly = true,
    CharacterLimit = 6,
    CurrentValue = tostring(flySpeed),
    Flag = "FlightSpeedInput",
    Callback = function(value)
        if ignoreCallbacks then return end
        local num = tonumber(value)
        if num then
            num = math.clamp(num, 1, 100000)
            flySpeed = num
            SafeSet(speedSlider, num)
        else
            SafeSet(speedInput, tostring(flySpeed))
        end
    end
})

keybindInput = FlyTab:CreateKeybind({
    Name = "Клавиша активации полёта",
    CurrentKeybind = "V",
    HoldToInteract = false,
    Flag = "FlightKeybind",
    Callback = function(key)
        if ignoreCallbacks then return end
        
        if key ~= flyKeybind then
            if key and IsValidKey(key) then
                flyKeybind = key
                ignoreCallbacks = true
                keybindInput:Set(tostring(key):gsub("Enum.KeyCode.", ""))
                ignoreCallbacks = false
                Notify("Настройки", "Клавиша полёта изменена на: "..tostring(key), 2)
            else
                ignoreCallbacks = true
                keybindInput:Set(tostring(flyKeybind):gsub("Enum.KeyCode.", ""))
                ignoreCallbacks = false
            end
        end
    end
})

flightToggle = FlyTab:CreateToggle({
    Name = "Включить полёт",
    CurrentValue = flyEnabled,
    Flag = "FlightToggle",
    Callback = function(state)
        if ignoreCallbacks then return end
        
        flyEnabled = state
        if state then
            SetupFlight()
            Notify("Полёт", string.format("Полёт активирован!\nСкорость: %d", flySpeed), 5)
        else
            DisableFlight()
            Notify("Полёт", "Полёт деактивирован", 2)
        end
    end
})

noClipToggle = FlyTab:CreateToggle({
    Name = "Режим NoClip",
    CurrentValue = noClipEnabled,
    Flag = "NoClipToggle",
    Callback = function(state)
        noClipEnabled = state
        UpdateNoClip()
        Notify("NoClip", noClipEnabled and "Режим NoClip включен" or "Режим NoClip выключен", 2)
    end
})

noClipKeybindInput = FlyTab:CreateKeybind({
    Name = "Клавиша NoClip (B)",
    CurrentKeybind = "B",
    HoldToInteract = false,
    Flag = "NoClipKeybind",
    Callback = function(key)
        if noClipKeybindDebounce then return end
        noClipKeybindDebounce = true
        
        if key ~= noClipKeybind then
            if key and IsValidKey(key) then
                noClipKeybind = key
                ignoreCallbacks = true
                noClipKeybindInput:Set(tostring(key):gsub("Enum.KeyCode.", ""))
                ignoreCallbacks = false
                Notify("Настройки", "Клавиша NoClip изменена на: "..tostring(key), 2)
            else
                ignoreCallbacks = true
                noClipKeybindInput:Set(tostring(noClipKeybind):gsub("Enum.KeyCode.", ""))
                ignoreCallbacks = false
            end
        else
            local newState = not noClipToggle.CurrentValue
            noClipToggle:Set(newState)
        end
        
        task.wait(0.2)
        noClipKeybindDebounce = false
    end
})

smoothToggle = FlyTab:CreateToggle({
    Name = "Плавный полёт",
    CurrentValue = smoothFlight,
    Flag = "SmoothFlightToggle",
    Callback = function(state)
        smoothFlight = state
    end
})

function SetupFlight()
    local player = game:GetService("Players").LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    local rootPart = character:WaitForChild("HumanoidRootPart")

    for _, obj in pairs(flyObjects) do
        if obj and obj.Parent then
            pcall(function() obj:Destroy() end)
        end
    end
    flyObjects = {}

    UpdateNoClip()

    flyObjects.bodyGyro = Instance.new("BodyGyro")
    flyObjects.bodyGyro.Name = "FlightGyro"
    flyObjects.bodyGyro.P = 20000
    flyObjects.bodyGyro.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
    flyObjects.bodyGyro.CFrame = rootPart.CFrame
    flyObjects.bodyGyro.Parent = rootPart

    flyObjects.bodyVelocity = Instance.new("BodyVelocity")
    flyObjects.bodyVelocity.Name = "FlightVelocity"
    flyObjects.bodyVelocity.Velocity = Vector3.new(0, 0.1, 0)
    flyObjects.bodyVelocity.MaxForce = Vector3.new(9e9, 9e9, 9e9)
    flyObjects.bodyVelocity.Parent = rootPart

    humanoid.PlatformStand = true
end

local function FlightController()
    if not flyEnabled then return end
    
    local player = game:GetService("Players").LocalPlayer
    local character = player.Character
    if not character then return end
    
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end
    
    local camera = workspace.CurrentCamera
    if not camera then return end
    
    local input = game:GetService("UserInputService")
    local moveVector = Vector3.new()
    local cameraCFrame = camera.CFrame
    local cameraLook = cameraCFrame.LookVector
    local cameraRight = cameraCFrame.RightVector

    if input:IsKeyDown(Enum.KeyCode.W) then moveVector = moveVector + cameraLook end
    if input:IsKeyDown(Enum.KeyCode.S) then moveVector = moveVector - cameraLook end
    if input:IsKeyDown(Enum.KeyCode.A) then moveVector = moveVector - cameraRight end
    if input:IsKeyDown(Enum.KeyCode.D) then moveVector = moveVector + cameraRight end
    if input:IsKeyDown(Enum.KeyCode.Space) then moveVector = moveVector + Vector3.new(0, 1, 0) end
    if input:IsKeyDown(Enum.KeyCode.LeftControl) then moveVector = moveVector - Vector3.new(0, 1, 0) end

    if moveVector.Magnitude > 0 then
        moveVector = moveVector.Unit
        moveVector = Vector3.new(
            moveVector.X * flySpeed,
            moveVector.Y * math.min(flySpeed / 2, 5000),
            moveVector.Z * flySpeed
        )
    end

    if flyObjects.bodyVelocity then
        if smoothFlight then
            flyObjects.bodyVelocity.Velocity = flyObjects.bodyVelocity.Velocity:Lerp(moveVector, 0.1)
        else
            flyObjects.bodyVelocity.Velocity = moveVector
        end
    end
    if flyObjects.bodyGyro then
        flyObjects.bodyGyro.CFrame = cameraCFrame
    end
end

function DisableFlight()
    local player = game:GetService("Players").LocalPlayer
    if player and player.Character then
        for _, part in ipairs(player.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
            end
        end
    end

    for _, obj in pairs(flyObjects) do
        if obj and obj.Parent then
            pcall(function() obj:Destroy() end)
        end
    end
    flyObjects = {}

    if player and player.Character then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.PlatformStand = false
        end
    end
end

local function HandleKeybind()
    if keybindDebounce then return end
    keybindDebounce = true
    
    flyEnabled = not flyEnabled
    SafeSet(flightToggle, flyEnabled)
    
    if flyEnabled then
        SetupFlight()
        Notify("Полёт", string.format("Полёт активирован!\nСкорость: %d", flySpeed), 3)
    else
        DisableFlight()
        Notify("Полёт", "Полёт деактивирован", 2)
    end
    
    task.wait(0.2)
    keybindDebounce = false
end

flyConnections.heartbeat = game:GetService("RunService").Heartbeat:Connect(function()
    FlightController()
end)

flyConnections.inputBegan = game:GetService("UserInputService").InputBegan:Connect(function(input, processed)
    if processed or game:GetService("UserInputService"):GetFocusedTextBox() then return end
    
    if input.KeyCode == flyKeybind then
        HandleKeybind()
    end
    
    if input.KeyCode == noClipKeybind then
        if noClipKeybindDebounce then return end
        noClipKeybindDebounce = true
        
        local newState = not noClipToggle.CurrentValue
        noClipToggle:Set(newState)
        
        task.wait(0.2)
        noClipKeybindDebounce = false
    end
end)

flyConnections.characterAdded = game:GetService("Players").LocalPlayer.CharacterAdded:Connect(function(character)
    if flyEnabled then
        task.wait(0.5)
        SetupFlight()
    end
    UpdateNoClip()
end)

game:GetService("Players").LocalPlayer.CharacterRemoving:Connect(DisableFlight)

task.spawn(function()
    task.wait(1)
    keybindInput:Set(tostring(flyKeybind):gsub("Enum.KeyCode.", ""))
    noClipKeybindInput:Set(tostring(noClipKeybind):gsub("Enum.KeyCode.", ""))
end)



local TpToolSection = FlyTab:CreateSection("Teleport Tool")

local tptoolEnabled = false
local tptool = nil
local tptoolConnection = nil

local function CreateTpTool()
    if tptool then
        tptool:Destroy()
        tptool = nil
    end

    tptool = Instance.new("Tool")
    tptool.Name = "TeleportTool"
    tptool.RequiresHandle = false
    tptool.CanBeDropped = false

    local player = game:GetService("Players").LocalPlayer
    if player and player.Character then
        tptool.Parent = player.Backpack
    end

    local function teleport()
        local character = player.Character
        if not character then return end
        
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        if not humanoidRootPart then return end
        
        local mouse = player:GetMouse()
        local target = mouse.Hit.Position
        
        humanoidRootPart.CFrame = CFrame.new(target + Vector3.new(0, 3, 0))
    end

    tptoolConnection = tptool.Activated:Connect(teleport)
end

local function RemoveTpTool()
    if tptool then
        tptool:Destroy()
        tptool = nil
    end
    if tptoolConnection then
        tptoolConnection:Disconnect()
        tptoolConnection = nil
    end
end

local tptoolToggle = FlyTab:CreateToggle({
    Name = "Включить TP Tool",
    CurrentValue = tptoolEnabled,
    Flag = "TpToolToggle",
    Callback = function(state)
        tptoolEnabled = state
        if state then
            CreateTpTool()
            Rayfield:Notify({
                Title = "TP Tool",
                Content = "Инструмент добавлен в инвентарь. ЛКМ для телепортации.",
                Duration = 5,
                Image = nil
            })
        else
            RemoveTpTool()
            Rayfield:Notify({
                Title = "TP Tool",
                Content = "Инструмент удален.",
                Duration = 3,
                Image = nil
            })
        end
    end
})

game:GetService("Players").LocalPlayer.CharacterAdded:Connect(function(character)
    if tptoolEnabled then
        task.wait(1)
        CreateTpTool()
    end
end)



local WaypointsTab = Window:CreateTab("Waypoints", 4483362458)

-- Переменные для хранения данных
local lastWaypoint = nil
local waypointName = "Unnamed"
local infoLabel = WaypointsTab:CreateLabel("No waypoint saved")
local waypointKeybind = Enum.KeyCode.T
local setWaypointKeybind = Enum.KeyCode.Y
local waypointKeybindDebounce = false
local setWaypointKeybindDebounce = false

-- Функция безопасной телепортации
local function SafeTeleport(position)
    local success, err = pcall(function()
        local char = game.Players.LocalPlayer.Character
        if char and char:FindFirstChild("HumanoidRootPart") then
            char.HumanoidRootPart.CFrame = CFrame.new(position)
        end
    end)
    if not success then
        warn("Teleport error:", err)
    end
end

-- Функция телепортации к вейпойнту
local function GotoWaypoint()
    if not lastWaypoint then
        Rayfield:Notify({
            Title = "Error",
            Content = "No waypoint saved!",
            Duration = 3
        })
        return
    end

    SafeTeleport(lastWaypoint.position)
    Rayfield:Notify({
        Title = "Teleported",
        Content = string.format("Moved to '%s'", lastWaypoint.name),
        Duration = 2
    })
end

-- Функция установки вейпойнта
local function SetWaypoint()
    local char = game.Players.LocalPlayer.Character
    if not char or not char:FindFirstChild("HumanoidRootPart") then
        Rayfield:Notify({
            Title = "Error",
            Content = "Character not found!",
            Duration = 3
        })
        return
    end

    lastWaypoint = {
        position = char.HumanoidRootPart.Position,
        name = waypointName,
        timestamp = os.time()
    }

    infoLabel:Set(string.format("Saved: %s (%s)", 
        lastWaypoint.name, 
        os.date("%H:%M", lastWaypoint.timestamp)))

    Rayfield:Notify({
        Title = "Waypoint Set",
        Content = string.format("Saved '%s'", lastWaypoint.name),
        Duration = 2
    })
end

-- Поле для ввода имени
local nameInput = WaypointsTab:CreateInput({
    Name = "Waypoint Name",
    PlaceholderText = "Enter waypoint name",
    RemoveTextAfterFocusLost = false,
    Callback = function(text)
        waypointName = text ~= "" and text or "Unnamed"
    end
})

-- Кнопка установки вейпойнта
WaypointsTab:CreateButton({
    Name = "Set Waypoint",
    Callback = SetWaypoint
})

-- Кнопка телепортации
WaypointsTab:CreateButton({
    Name = "Goto Waypoint",
    Callback = GotoWaypoint
})

-- Бинд для телепортации по клавише T
WaypointsTab:CreateKeybind({
    Name = "Teleport Keybind (T)",
    CurrentKeybind = "T",
    HoldToInteract = false,
    Flag = "WaypointKeybind",
    Callback = function(key)
        if waypointKeybindDebounce then return end
        waypointKeybindDebounce = true
        
        if key ~= waypointKeybind then
            if key then
                waypointKeybind = key
                Rayfield:Notify({
                    Title = "Waypoint",
                    Content = "Клавиша телепортации изменена на: "..tostring(key),
                    Duration = 2,
                    Image = nil
                })
            end
        else
            GotoWaypoint()
        end
        
        task.wait(0.2)
        waypointKeybindDebounce = false
    end
})

-- Бинд для установки вейпойнта по клавише Y
WaypointsTab:CreateKeybind({
    Name = "Set Waypoint Keybind (Y)",
    CurrentKeybind = "Y",
    HoldToInteract = false,
    Flag = "SetWaypointKeybind",
    Callback = function(key)
        if setWaypointKeybindDebounce then return end
        setWaypointKeybindDebounce = true
        
        if key ~= setWaypointKeybind then
            if key then
                setWaypointKeybind = key
                Rayfield:Notify({
                    Title = "Waypoint",
                    Content = "Клавиша установки вейпойнта изменена на: "..tostring(key),
                    Duration = 2,
                    Image = nil
                })
            end
        else
            SetWaypoint()
        end
        
        task.wait(0.2)
        setWaypointKeybindDebounce = false
    end
})

-- Обработчики ввода для биндов
game:GetService("UserInputService").InputBegan:Connect(function(input, processed)
    if processed then return end
    
    -- Обработка бинда телепортации (T)
    if input.KeyCode == waypointKeybind then
        if waypointKeybindDebounce then return end
        waypointKeybindDebounce = true
        GotoWaypoint()
        task.wait(0.2)
        waypointKeybindDebounce = false
    end
    
    -- Обработка бинда установки вейпойнта (Y)
    if input.KeyCode == setWaypointKeybind then
        if setWaypointKeybindDebounce then return end
        setWaypointKeybindDebounce = true
        SetWaypoint()
        task.wait(0.2)
        setWaypointKeybindDebounce = false
    end
end)

local Tab = Window:CreateTab("Player list", 4483362458)

local PlayersSection = Tab:CreateSection("Players on server")

local playerButtons = {}

local function updatePlayerList()
    local newPlayers = {}
    
    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
        if player ~= game.Players.LocalPlayer then
            table.insert(newPlayers, player)
        end
    end
    
    for player, button in pairs(playerButtons) do
        if not table.find(newPlayers, player) then
            button.Visible = false
            playerButtons[player] = nil
        end
    end
    
    for _, player in ipairs(newPlayers) do
        if not playerButtons[player] then
            playerButtons[player] = Tab:CreateButton({
                Name = player.Name .. " (@"..player.DisplayName..")",
                Callback = function()
                    local localChar = game.Players.LocalPlayer.Character
                    local targetChar = player.Character
                    
                    if localChar and targetChar then
                        local hrp = localChar:FindFirstChild("HumanoidRootPart")
                        local targetHrp = targetChar:FindFirstChild("HumanoidRootPart")
                        
                        if hrp and targetHrp then
                            hrp.CFrame = targetHrp.CFrame * CFrame.new(0, 0, -3)
                            Rayfield:Notify({
                                Title = "Teleport",
                                Content = "Teleported to "..player.Name,
                                Duration = 3,
                                Image = nil
                            })
                        end
                    end
                end
            })
        end
    end
end

Tab:CreateButton({
    Name = "Refresh Player List",
    Callback = updatePlayerList
})

local SearchSection = Tab:CreateSection("Player Search")

Tab:CreateInput({
    Name = "Search Player",
    PlaceholderText = "Enter player name",
    RemoveTextAfterFocusLost = false,
    Callback = function(text)
        for player, button in pairs(playerButtons) do
            local searchText = string.lower(text or "")
            local playerName = string.lower(player.Name)
            local displayName = string.lower(player.DisplayName)
            
            button.Visible = searchText == "" or 
                           string.find(playerName, searchText) or 
                           string.find(displayName, searchText)
        end
    end
})

game:GetService("Players").PlayerAdded:Connect(updatePlayerList)
game:GetService("Players").PlayerRemoving:Connect(updatePlayerList)

updatePlayerList()

local Tab = Window:CreateTab("Arsenal", 4483362458)

Tab:CreateButton({
    Name = "vertex",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/vertex-peak/vertex/refs/heads/main/loadstring"))()
        Rayfield:Notify({
            Title = "vertex Loader",
            Content = "vertex успешно запущен!",
            Duration = 3,
            Image = nil
        })
    end,
})

local Tab = Window:CreateTab("RIVALS", 4483362458)

Tab:CreateButton({
    Name = "Пароль NewUpdate",
    Callback = function() end,
})

Tab:CreateButton({
    Name = "Запустить RIVALS AIM",
    Callback = function()
        loadstring(game:HttpGet("https://pastebin.com/raw/gcUsjvks"))()       
        Rayfield:Notify({
            Title = "RIVALS AIM Loader",
            Content = "RIVALS AIM успешно запущен!",
            Duration = 3,
            Image = nil
        })
    end,
})

local Tab = Window:CreateTab("Brookhaven-RP", 4483362458)

Tab:CreateButton({
    Name = "Запустить Coquette Hub",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Daivd977/Deivd999/refs/heads/main/pessal"))()
        Rayfield:Notify({
            Title = "Coquette Hub Loader",
            Content = "Coquette Hub успешно запущен!",
            Duration = 3,
            Image = nil
        })
    end,
})

local Tab = Window:CreateTab("99 Nights in the Forest", 4483362458)

Tab:CreateButton({
    Name = "VoidWare",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/VapeVoidware/VWExtra/main/NightsInTheForest.lua", true))()
        Rayfield:Notify({
            Title = "VoidWare Loader",
            Content = "VoidWare успешно запущен!",
            Duration = 3,
            Image = nil
        })
    end,
})

local FunTab = Window:CreateTab("Fun", 4483362458)
local AnimationSection = FunTab:CreateSection("Animations")

-- Настройки
local jerkOffEnabled = false
local jerkOffTool = nil
local currentAnimationTrack = nil
local animationSpeed = 1.0
local lastResetTime = 0

-- Конфигурация анимаций с улучшенными параметрами синхронизации
local ANIMATIONS = {
    R6 = {
        ID = "rbxassetid://72042024",
        BaseSpeed = 0.5,  -- Уменьшенная базовая скорость для лучшей синхронизации
        LoopRange = {0.5, 0.6},
        Priority = Enum.AnimationPriority.Action4
    },
    R15 = {
        ID = "rbxassetid://698251653",
        BaseSpeed = 0.6,
        LoopRange = {0.5, 0.65},
        Priority = Enum.AnimationPriority.Action4
    }
}

-- Определение типа аватара с кешированием
local function getRigType(player)
    local character = player.Character
    if not character then return "R6" end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return "R6" end
    
    return humanoid.RigType == Enum.HumanoidRigType.R15 and "R15" or "R6"
end

-- Улучшенная система анимации с синхронизацией
local function manageAnimation()
    if not jerkOffEnabled or not jerkOffTool then return end
    
    local player = game.Players.LocalPlayer
    local character = player.Character
    if not character then return end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end
    
    -- Очистка предыдущей анимации
    if currentAnimationTrack then
        currentAnimationTrack:Stop()
        currentAnimationTrack:Destroy()
        currentAnimationTrack = nil
    end
    
    local rigType = getRigType(player)
    local config = ANIMATIONS[rigType]
    
    -- Создание анимации
    local anim = Instance.new("Animation")
    anim.AnimationId = config.ID
    currentAnimationTrack = humanoid:LoadAnimation(anim)
    currentAnimationTrack.Priority = config.Priority
    
    -- Настройка скорости
    local actualSpeed = config.BaseSpeed * animationSpeed
    currentAnimationTrack:Play()
    currentAnimationTrack:AdjustSpeed(actualSpeed)
    currentAnimationTrack.TimePosition = config.LoopRange[1]
    
    -- Цикл синхронизации
    coroutine.wrap(function()
        local lastUpdate = time()
        
        while jerkOffEnabled and jerkOffTool and jerkOffTool.Parent do
            local now = time()
            
            -- Принудительный сброс анимации каждые 1.5 секунды
            if now - lastResetTime > 1.5 then
                currentAnimationTrack:Stop()
                currentAnimationTrack:Play()
                currentAnimationTrack.TimePosition = config.LoopRange[1]
                lastResetTime = now
            end
            
            -- Плавное проигрывание анимации
            if currentAnimationTrack then
                if currentAnimationTrack.TimePosition >= config.LoopRange[2] then
                    currentAnimationTrack.TimePosition = config.LoopRange[1]
                end
                
                -- Периодическая корректировка скорости
                if now - lastUpdate > 0.5 then
                    currentAnimationTrack:AdjustSpeed(config.BaseSpeed * animationSpeed)
                    lastUpdate = now
                end
            end
            
            task.wait(0.1) -- Фиксированный интервал обновления
        end
        
        -- Корректная очистка
        if currentAnimationTrack then
            currentAnimationTrack:Stop()
            currentAnimationTrack:Destroy()
            currentAnimationTrack = nil
        end
    end)()
end

-- Создание инструмента с улучшенной синхронизацией
local function createJerkOffTool()
    if jerkOffTool then jerkOffTool:Destroy() end
    
    local player = game.Players.LocalPlayer
    jerkOffTool = Instance.new("Tool")
    jerkOffTool.Name = "Masturbation"
    jerkOffTool.ToolTip = string.format("Speed: %.1fx (Synced)", animationSpeed)
    jerkOffTool.RequiresHandle = false
    
    local backpack = player:FindFirstChildOfClass("Backpack")
    if backpack then
        jerkOffTool.Parent = backpack
        
        jerkOffTool.Equipped:Connect(function()
            lastResetTime = time()
            manageAnimation()
        end)
        
        jerkOffTool.Unequipped:Connect(function()
            if currentAnimationTrack then
                currentAnimationTrack:Stop()
                currentAnimationTrack:Destroy()
                currentAnimationTrack = nil
            end
        end)
    end
end

-- Слайдер скорости с ограничением для синхронизации
FunTab:CreateSlider({
    Name = "Masturbation Speed",
    Range = {0.5, 2.0},  -- Ограниченный диапазон для стабильности
    Increment = 0.1,
    Suffix = "x",
    CurrentValue = animationSpeed,
    Callback = function(value)
        animationSpeed = value
        lastResetTime = time()
        
        if jerkOffTool then
            jerkOffTool.ToolTip = string.format("Speed: %.1fx (Synced)", animationSpeed)
        end
        
        if currentAnimationTrack then
            local config = ANIMATIONS[getRigType(game.Players.LocalPlayer)]
            currentAnimationTrack:AdjustSpeed(config.BaseSpeed * animationSpeed)
        end
    end
})

-- Основной переключатель
FunTab:CreateToggle({
    Name = "Give Masturbation Tool",
    CurrentValue = false,
    Callback = function(state)
        jerkOffEnabled = state
        if state then
            createJerkOffTool()
            Rayfield:Notify({
                Title = "Tool Enabled",
                Content = string.format("Speed: %.1fx | Synced for all players", animationSpeed),
                Duration = 4,
                Image = 4483362458
            })
        else
            if jerkOffTool then jerkOffTool:Destroy() end
            if currentAnimationTrack then
                currentAnimationTrack:Stop()
                currentAnimationTrack:Destroy()
                currentAnimationTrack = nil
            end
        end
    end
})

-- Автоматическое восстановление при смерти
game.Players.LocalPlayer.CharacterAdded:Connect(function(character)
    if jerkOffEnabled then
        task.wait(1) -- Важно для полной загрузки персонажа
        createJerkOffTool()
    end
end)

-- Периодическая проверка состояния
game:GetService("RunService").Heartbeat:Connect(function()
    if jerkOffEnabled and jerkOffTool and not jerkOffTool.Parent then
        createJerkOffTool()
    end
end)

local BangSection = FunTab:CreateSection("Bang V2")

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")

-- Настройки
local following = false
local targetPlayer = nil
local animationId = "189854234"
local backupAnimationId = "182789003"
local animator = nil
local animationSpeed = 1.0
local lastCFrame = nil
local debounce = false

-- Поле ввода для цели
local TargetInput = FunTab:CreateInput({
    Name = "Цель Bang V2",
    PlaceholderText = "Имя игрока",
    RemoveTextAfterFocusLost = false,
    Callback = function(text)
        -- Сохраняем введенное имя
    end
})

-- Ползунок скорости
local SpeedSlider = FunTab:CreateSlider({
    Name = "Скорость Bang",
    Range = {0.5, 3.0},
    Increment = 0.1,
    Suffix = "x",
    CurrentValue = animationSpeed,
    Callback = function(value)
        animationSpeed = value
        if animator then animator:AdjustSpeed(value) end
    end
})

-- Кнопка активации
local BangButton = FunTab:CreateButton({
    Name = "Активировать Bang V2",
    Callback = function()
        if debounce then return end
        debounce = true
        
        following = not following
        
        if following then
            -- Поиск цели
            local targetName = TargetInput.CurrentValue:lower()
            targetPlayer = nil
            
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer then
                    if string.find(player.Name:lower(), targetName) or 
                       (player.DisplayName and string.find(player.DisplayName:lower(), targetName)) then
                        targetPlayer = player
                        break
                    end
                end
            end
            
            if targetPlayer and targetPlayer.Character then
                -- Настройка анимации
                local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    local animation = Instance.new("Animation")
                    animation.AnimationId = "rbxassetid://"..animationId
                    animator = humanoid:LoadAnimation(animation)
                    animator.Priority = Enum.AnimationPriority.Action4
                    animator:AdjustSpeed(animationSpeed)
                end

                coroutine.wrap(function()
                    while following and targetPlayer and targetPlayer.Character do
                        local targetChar = targetPlayer.Character
                        local targetHRP = targetChar:FindFirstChild("HumanoidRootPart")
                        local localChar = LocalPlayer.Character
                        local localHRP = localChar and localChar:FindFirstChild("HumanoidRootPart")
                        
                        if targetHRP and localHRP then
                            local targetCF = targetHRP.CFrame
                            local followCF = targetCF * CFrame.new(0, 0, 1.2)
                            
                            if not lastCFrame or (followCF.Position - lastCFrame.Position).Magnitude > 0.1 then
                                lastCFrame = followCF
                                localHRP.CFrame = CFrame.new(followCF.Position) *
                                    CFrame.Angles(0, math.atan2(-targetCF.LookVector.X, -targetCF.LookVector.Z), 0)
                            end
                            
                            if animator then
                                animator:Play()
                                task.wait(0.1)
                                animator:Stop()
                                task.wait(0.1)
                            end
                        else
                            following = false
                            break
                        end
                    end
                    
                    if animator then
                        animator:Stop()
                        animator:Destroy()
                        animator = nil
                    end
                end)()
                
                Rayfield:Notify({
                    Title = "Bang V2",
                    Content = "Активировано для "..targetPlayer.Name,
                    Duration = 3,
                    Image = 4483362458
                })
            else
                following = false
                Rayfield:Notify({
                    Title = "Ошибка",
                    Content = "Игрок не найден!",
                    Duration = 3,
                    Image = 7733960981
                })
            end
        else
            if animator then
                animator:Stop()
                animator:Destroy()
                animator = nil
            end
            
            Rayfield:Notify({
                Title = "Bang V2",
                Content = "Деактивировано",
                Duration = 2,
                Image = 4483362458
            })
        end
        
        debounce = false
    end
})


-- Восстановление после смерти
LocalPlayer.CharacterAdded:Connect(function(character)
    if following and targetPlayer then
        task.wait(1)
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://"..animationId
            animator = humanoid:LoadAnimation(animation)
            animator.Priority = Enum.AnimationPriority.Action4
            animator:AdjustSpeed(animationSpeed)
        end
    end
end)

-- Остановка при выходе цели
Players.PlayerRemoving:Connect(function(player)
    if player == targetPlayer then
        following = false
        if animator then
            animator:Stop()
            animator:Destroy()
            animator = nil
        end
        Rayfield:Notify({
            Title = "Bang V2",
            Content = "Цель покинула игру",
            Duration = 3,
            Image = 4483362458
        })
    end
end)

local FlingSection = FunTab:CreateSection("Fling")

local hiddenfling = false
local flingThread = nil
local flingPower = 10000 -- Базовая сила (можно менять)
local flingYForce = 10000 -- Вертикальная сила

-- Ползунок для настройки силы
local powerSlider = FunTab:CreateSlider({
    Name = "Сила флинга",
    Range = {1000, 50000},
    Increment = 100,
    Suffix = "ед.",
    CurrentValue = flingPower,
    Flag = "FlingPowerSlider",
    Callback = function(value)
        flingPower = value
    end
})

-- Ползунок для вертикальной силы
local yForceSlider = FunTab:CreateSlider({
    Name = "Вертикальная сила",
    Range = {1000, 30000},
    Increment = 100,
    Suffix = "ед.",
    CurrentValue = flingYForce,
    Flag = "FlingYForceSlider",
    Callback = function(value)
        flingYForce = value
    end
})

-- Основной переключатель
local toggle = FunTab:CreateToggle({
    Name = "Fling",
    CurrentValue = false,
    Flag = "TouchFlingToggle",
    Callback = function(state)
        hiddenfling = state
        
        if hiddenfling then
            -- Запускаем флинг с настройками силы
            flingThread = coroutine.create(function()
                local lp = game.Players.LocalPlayer
                local RunService = game:GetService("RunService")
                local c, hrp, vel, movel = nil, nil, nil, 0.1
                
                while hiddenfling do
                    RunService.Heartbeat:Wait()
                    c = lp.Character
                    hrp = c and c:FindFirstChild("HumanoidRootPart")
                    
                    if hrp then
                        vel = hrp.Velocity
                        -- Применяем настройки силы
                        hrp.Velocity = vel * flingPower + Vector3.new(0, flingYForce, 0)
                        RunService.RenderStepped:Wait()
                        hrp.Velocity = vel
                        RunService.Stepped:Wait()
                        hrp.Velocity = vel + Vector3.new(0, movel * (flingYForce/10000), 0)
                        movel = -movel
                    end
                end
            end)
            coroutine.resume(flingThread)
            
            Rayfield:Notify({
                Title = "Touch Fling PRO",
                Content = string.format("Активирован (Сила: %d, Вертикаль: %d)", flingPower, flingYForce),
                Duration = 3,
                Image = 4483362458
            })
        else
            hiddenfling = false
            Rayfield:Notify({
                Title = "Fling",
                Content = "Деактивирован",
                Duration = 2,
                Image = 4483362458
            })
        end
    end
})

local keybind = FunTab:CreateKeybind({
    Name = "Горячая клавиша (H)",
    CurrentKeybind = "H",
    HoldToInteract = false,
    Flag = "FlingKeybind",
    Callback = function(key)
        if key ~= flingKeybind then
            if key then
                flingKeybind = key
                Rayfield:Notify({
                    Title = "Touch Fling",
                    Content = "Клавиша изменена на: "..tostring(key),
                    Duration = 2,
                    Image = 4483362458
                })
            end
        else
            toggle:Set(not hiddenfling)
        end
    end
})

-- Обработчик ввода
game:GetService("UserInputService").InputBegan:Connect(function(input, processed)
    if processed then return end
    if input.KeyCode == flingKeybind then
        if keybindDebounce then return end
        keybindDebounce = true
        
        toggle:Set(not hiddenfling)
        
        task.wait(0.2)
        keybindDebounce = false
    end
end)

-- Автоматическая корректировка при изменении силы во время работы
game:GetService("RunService").Heartbeat:Connect(function()
    if hiddenfling and game.Players.LocalPlayer.Character then
        local hrp = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if hrp and hrp.Velocity.Magnitude > flingPower * 1.5 then
            hrp.Velocity = hrp.Velocity.Unit * flingPower
        end
    end
end)

-- Защита от обнаружения (как в оригинале)
if not game:GetService("ReplicatedStorage"):FindFirstChild("juisdfj0i32i0eidsuf0iok") then
    local detection = Instance.new("Decal")
    detection.Name = "juisdfj0i32i0eidsuf0iok"
    detection.Parent = game:GetService("ReplicatedStorage")
end

local Tab = Window:CreateTab("Other", 4483362458)

local ScriptsSection = Tab:CreateSection("Other Functions")

Tab:CreateButton({
    Name = "Rejoin",
    Callback = function()
        Rayfield:Notify({
            Title = "Rejoin",
            Content = "Переподключаемся к серверу...",
            Duration = 3,
            Image = nil
        })
        game:GetService("TeleportService"):Teleport(game.PlaceId, game:GetService("Players").LocalPlayer)
    end,
})

local autoLoadScripts = {
    {
        Name = "Infinite Yield",
        URL = "https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source",
        Enabled = false
    },
    {
        Name = "Dex",
        URL = "https://raw.githubusercontent.com/infyiff/backup/main/dex.lua",
        Enabled = false
    }
}

for i, scriptInfo in ipairs(autoLoadScripts) do
    Tab:CreateToggle({
        Name = "Автозагрузка "..scriptInfo.Name,
        CurrentValue = scriptInfo.Enabled,
        Flag = "AutoLoad"..scriptInfo.Name,
        Callback = function(state)
            autoLoadScripts[i].Enabled = state
            Rayfield:Notify({
                Title = "Автозагрузка",
                Content = scriptInfo.Name..(state and " будет загружаться автоматически" or " больше не будет загружаться автоматически"),
                Duration = 3,
                Image = nil
            })
        end
    })
end

local function AutoLoadScripts()
    for _, scriptInfo in ipairs(autoLoadScripts) do
        if scriptInfo.Enabled then
            pcall(function()
                loadstring(game:HttpGet(scriptInfo.URL))()
            end)
        end
    end
end

task.spawn(function()
    task.wait(2)
    AutoLoadScripts()
end)

Tab:CreateButton({
    Name = "Full Script Restart",
    Callback = function()
        Rayfield:Notify({
            Title = "Restart",
            Content = "Полный перезапуск скрипта...",
            Duration = 3,
            Image = nil
        })
        
        -- Сохраняем текущие настройки перед перезапуском
        if Rayfield and Rayfield.ConfigurationSaving and Rayfield.ConfigurationSaving.Enabled then
            Rayfield:SaveConfiguration()
        end
        
        -- Очищаем предыдущий интерфейс
        if Rayfield then
            Rayfield:Destroy()
        end
        
        -- Небольшая задержка перед перезапуском
        task.wait(1)
        
        -- Полный перезапуск скрипта
        local scriptUrl = "https://raw.githubusercontent.com/Leshanchiks/Hub/refs/heads/main/Hub5" -- Замените на актуальную ссылку
        loadstring(game:HttpGet(scriptUrl))()
    end
})

Tab:CreateButton({
    Name = "Запустить Infinite Yield",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
        Rayfield:Notify({
            Title = "Script Loader",
            Content = "Infinite Yield успешно запущен!",
            Duration = 3,
            Image = nil
        })
    end,
})

Tab:CreateButton({
    Name = "Запустить Dex",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/dex.lua"))()
        Rayfield:Notify({
            Title = "Script Loader",
            Content = "Dex успешно запущен!",
            Duration = 3,
            Image = nil
        })
    end,
})

Tab:CreateButton({
    Name = "Esp",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Leshanchiks/My-scr/refs/heads/main/Esp"))()
        Rayfield:Notify({
            Title = "Script Loader",
            Content = "Esp успешно запущен!",
            Duration = 3,
            Image = nil
        })
    end,
})

local customScriptInput = Tab:CreateInput({
    Name = "Загрузить свой скрипт",
    PlaceholderText = "Вставьте URL скрипта",
    RemoveTextAfterFocusLost = false,
    Callback = function(text)
        if text and text ~= "" then
            local success, err = pcall(function()
                loadstring(game:HttpGet(text))()
            end)
            
            if success then
                Rayfield:Notify({
                    Title = "Script Loader",
                    Content = "Скрипт успешно загружен!",
                    Duration = 3,
                    Image = nil
                })
            else
                Rayfield:Notify({
                    Title = "Ошибка",
                    Content = "Не удалось загрузить скрипт: "..tostring(err),
                    Duration = 5,
                    Image = nil
                })
            end
        end
    end,
})
